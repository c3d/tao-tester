// *****************************************************************************
// tao_tester.tbl                                                  Tao3D project
// *****************************************************************************
//
// File description:
//
//   Definition of the interface between XLR and native code
//   for the "tao tester" module.
//   Tests...
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2012,2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

#include "tao_tester.h"

#define RTEST(x)  return x;

PREFIX(TestStartRec,  tree,  "test_start_record", , RTEST(startRecTest(self)),
       GROUP(test)
       SYNOPSIS("Start to record ")
       DESCRIPTION("Start to record events in order to replay them "))
PREFIX(TestStop,  tree,  "test_stop", , RTEST(stop(self)),
       GROUP(test)
       SYNOPSIS("Stop the recording or the playing of tests.")
       DESCRIPTION("Stop the recording or the playing of tests."))
PREFIX(TestReplay,  tree,  "test_replay", , RTEST(playTest(self, false)),
       GROUP(test)
       SYNOPSIS("Replay test ")
       DESCRIPTION("Replay the current test events. "))
PREFIX(TestMakeRef,  tree,  "make_ref", , RTEST(playTest(self, true)),
       GROUP(test)
       SYNOPSIS("Replay test ")
       DESCRIPTION("Replay the current test events. "))
PREFIX(TestDef,  tree,  "test_definition",
       PARM(testname, text, "Name of the test. It is used to find/write files.")
       PARM(feature, integer, "The feature ID in Redmine this test refers to.")
       PARM(description, text, "The description of this particular test.")
       PARM(width, integer, "Width of the window.")
       PARM(height, integer, "Height of the window.")
       PARM(testbody, code, "The sequence of actions that makes the test."),
       RTEST(testDef(context, self, testname, feature, description, testbody, width, height)),
       GROUP(test)
       SYNOPSIS("Define the current test")
       DESCRIPTION("Test to activate rectangle action. "))

PREFIX(TestAddKeyPress,  tree,  "test_add_key_press",
       PARM(key, integer, )
       PARM(modifiers, integer, )
       PARM(delay, integer, ),
       RTEST(testAddKeyPress(self, key, modifiers, delay)),
       GROUP(test)
       SYNOPSIS("Add a key press event ")
       DESCRIPTION("Add a key press event to the current test."))
PREFIX(TestAddKeyRelease,  tree,  "test_add_key_release",
       PARM(key, integer, )
       PARM(modifiers, integer, )
       PARM(delay, integer, ),
       RTEST(testAddKeyRelease(self, key, modifiers, delay)),
       GROUP(test)
       SYNOPSIS("Add a key release event ")
       DESCRIPTION("Add a key release event to the current test."))

PREFIX(TestAddMousePress,  tree,  "test_add_mouse_press",
       PARM(button, integer, "The button that trigger this event")
       PARM(buttons, integer, "All buttons state when this event was triggered")
       PARM(modifiers, integer, "Modifiers state when this event was triggered")
       PARM(x, integer, )
       PARM(y, integer, )
       PARM(delay, integer, ),
       RTEST(testAddMousePress(self, button, buttons, modifiers, x, y, delay)),
       GROUP(test)
       SYNOPSIS("Add a mouse button press event ")
       DESCRIPTION("Add a mouse button press event to the current test."))
PREFIX(TestAddMouseRelease,  tree,  "test_add_mouse_release",
       PARM(button, integer, )
       PARM(buttons, integer, )
       PARM(modifiers, integer, )
       PARM(x, integer, )
       PARM(y, integer, )
       PARM(delay, integer, ),
       RTEST(testAddMouseRelease(self, button, buttons, modifiers, x, y, delay)),
       GROUP(test)
       SYNOPSIS("Add a mouse button release event ")
       DESCRIPTION("Add a mouse button release event to the current test."))
PREFIX(TestAddMouseDClick,  tree,  "test_add_mouse_dclick",
       PARM(button, integer, )
       PARM(buttons, integer, )
       PARM(modifiers, integer, )
       PARM(x, integer, )
       PARM(y, integer, )
       PARM(delay, integer, ),
       RTEST(testAddMouseDClick(self, button, buttons, modifiers, x, y, delay)),
       GROUP(test)
       SYNOPSIS("Add a mouse button double click event ")
       DESCRIPTION("Add a mouse button double click event to the current test."))
PREFIX(TestAddMouseMove,  tree,  "test_add_mouse_move",
       PARM(button, integer, )
       PARM(buttons, integer, )
       PARM(modifiers, integer, )
       PARM(x, integer, )
       PARM(y, integer, )
       PARM(delay, integer, ),
       RTEST(testAddMouseMove(self, button, buttons, modifiers, x, y, delay)),
       GROUP(test)
       SYNOPSIS("Add a mouse move event ")
       DESCRIPTION("Add a mouse move event to the current test."))
PREFIX(TestAddAction,  tree,  "test_add_action",
       PARM(actionName, text, )
       PARM(delay, integer, ),
       RTEST(testAddAction(self, actionName, delay)),
       GROUP(test)
       SYNOPSIS("Add an action event ")
       DESCRIPTION("Add an action event to the current test."))

PREFIX(TestSave,  tree,  "test_save", , RTEST(saveTest(self)),
       GROUP(test)
       SYNOPSIS("Save the current test to disc")
       DESCRIPTION("Save the current test to disc."))

PREFIX(TestReset,  tree,  "test_reset", , RTEST(resetTest(self)),
       GROUP(test)
       SYNOPSIS("Save the current test to disc")
       DESCRIPTION("Save the current test to disc."))

PREFIX(TestCheck,  tree,  "test_check", , RTEST(testCheck(self)),
       GROUP(test)
       SYNOPSIS("Add a check point to the test")
       DESCRIPTION("Add a check point with its image to the test list. If the check pointis KO, the simulation is not stopped."))

PREFIX(TestAddCheck,  tree,  "test_add_check",
       PARM(num, integer, )
       PARM(delay, integer, )
       PARM(threshold, real, "The authorized error threshold for image comparison."),
       RTEST(testAddCheck(self, num, delay, threshold)),
       GROUP(test)
       SYNOPSIS("Check the view")
       DESCRIPTION("Check"))
PREFIX(TestAddCheck1,  tree,  "test_add_check",
       PARM(num, integer, )
       PARM(delay, integer, ),
       RTEST(testAddCheck(self, num, delay, 0.0)),
       GROUP(test)
       SYNOPSIS("Check the view")
       DESCRIPTION("Check"))

PREFIX(TestAddFont,  tree,  "test_add_font",
       PARM(diagname, text, )
       PARM(ftname, text, )
       PARM(delay, integer, ),
       RTEST(testAddFont(self, diagname, ftname, delay)),
       GROUP(test)
       SYNOPSIS("Add an event to change the current font")
       DESCRIPTION("Check[TODO]"))

PREFIX(TestAddFile,  tree,  "test_add_file",
       PARM(diagname, text, "The objectname of the dialog box.")
       PARM(filename, text, "The name of the selected file.")
       PARM(delay, integer, "The delay before this action is excuted."),
       RTEST(testAddFile(self, diagname, filename, delay)),
       GROUP(test)
       SYNOPSIS("Add an event to select a file name.")
       DESCRIPTION("Add an event to select a file name."))

PREFIX(TestAddColor,  tree,  "test_add_color",
       PARM(diagname, text, )
       PARM(colname, text, )
       PARM(alpha, real, )
       PARM(delay, integer, ),
       RTEST(testAddColor(self, diagname, colname, alpha, delay)),
       GROUP(test)
       SYNOPSIS("Check the view[TODO]")
       DESCRIPTION("Check"))

PREFIX(TestAddCloseDialog,  tree,  "test_add_close_dialog",
       PARM(diagname, text, )
       PARM(result, integer, )
       PARM(delay, integer, ),
       RTEST(testAddCloseDialog(self, diagname, result, delay)),
       GROUP(test)
       SYNOPSIS("Check the view [TODO]")
       DESCRIPTION("Check"))
